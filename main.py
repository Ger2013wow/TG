# pip install aiogram==2.25.1
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor

# ===== –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å "–ø—Ä–æ—à–ª—ã–º" –±–æ—Ç–æ–º =====
BOT_TOKEN = (
    os.getenv("TELEGRAM_BOT_TOKEN")      # –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    or os.getenv("BOT_TOKEN")            # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ
    or os.getenv("TOKEN")                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
)
if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω: TELEGRAM_BOT_TOKEN / BOT_TOKEN / TOKEN")

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å chat id –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –±–æ—Ç–∞
def collect_chat_ids():
    ids = set()
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ:
    for name in ["CHAT_ID", "GROUP_ID", "CHANNEL_ID"]:
        v = os.getenv(name)
        if v:
            ids.add(int(v))

    # –°–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:
    for name in ["CHAT_IDS", "GROUP_IDS", "CHANNEL_IDS"]:
        v = os.getenv(name)
        if v:
            for part in v.split(","):
                part = part.strip()
                if part:
                    ids.add(int(part))

    # –Ø–∑—ã–∫–æ–≤—ã–µ/—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ):
    for name in [
        "GROUP_ID_RU", "GROUP_ID_EN", "GROUP_ID_TR", "GROUP_ID_AZ", "GROUP_ID_ES",
        "GROUP_ID_AR", "GROUP_ID_KZ", "GROUP_ID_UA"
    ]:
        v = os.getenv(name)
        if v:
            ids.add(int(v))

    return ids

TARGET_CHAT_IDS = collect_chat_ids()
# –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ ¬´–æ–ø—Ä–µ–¥–µ–ª–∏ id –≤ –ª–æ–≥–∞—Ö¬ª
DISCOVERY_MODE = len(TARGET_CHAT_IDS) == 0

# –ö–Ω–æ–ø–∫–∏: "–¢–µ–∫—Å—Ç|URL;–¢–µ–∫—Å—Ç2|URL2"
RAW_BUTTONS = os.getenv("BUTTONS", "–ü–µ—Ä–µ–π—Ç–∏ üåê|https://wepari.com")
BUTTON_HEADER_TEXT = os.getenv("BUTTON_HEADER_TEXT", "üëâ –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤—ã—à–µ")
ROW_WIDTH = int(os.getenv("BUTTON_ROW_WIDTH", "1"))  # 1 = —Å—Ç–æ–ª–±–∏–∫–æ–º, 2 = –ø–æ –¥–≤–µ –≤ —Ä—è–¥

def parse_buttons(raw: str):
    buttons = []
    for chunk in (raw or "").split(";"):
        chunk = chunk.strip()
        if not chunk:
            continue
        if "|" in chunk:
            txt, url = chunk.split("|", 1)
            buttons.append({"text": txt.strip(), "url": url.strip()})
        else:
            # fallback: –µ—Å–ª–∏ –±–µ–∑ |, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç, –∏ –∫–∞–∫ url
            buttons.append({"text": chunk, "url": chunk})
    return buttons

BUTTONS = parse_buttons(RAW_BUTTONS)

# ===== –ë–æ—Ç =====
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

def make_keyboard():
    kb = types.InlineKeyboardMarkup(row_width=ROW_WIDTH)
    for b in BUTTONS:
        if not b.get("text") or not b.get("url"):
            continue
        kb.add(types.InlineKeyboardButton(text=b["text"], url=b["url"]))
    return kb

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def attach_buttons(message: types.Message):
    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ chat id ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    if DISCOVERY_MODE:
        print(f"[DISCOVERY] chat id: {message.chat.id} | title: {message.chat.title}")
        return

    # –¢–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–µ —á–∞—Ç—ã
    if message.chat.id not in TARGET_CHAT_IDS:
        return

    # –ò–≥–Ω–æ—Ä –±–æ—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)
    if message.from_user and message.from_user.is_bot:
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ø–æ–¥¬ª –∏—Å—Ö–æ–¥–Ω—ã–º –ø–æ—Å—Ç–æ–º
    try:
        await bot.send_message(
            chat_id=message.chat.id,
            text=BUTTON_HEADER_TEXT,
            reply_markup=make_keyboard(),
            reply_to_message_id=message.message_id
        )
    except Exception as e:
        print(f"[ERROR] failed to send buttons: {e}")

if __name__ == "__main__":
    print("Buttons relay bot started (long polling).")
    if DISCOVERY_MODE:
        print("DISCOVERY_MODE=ON ‚Üí –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ, –≤ –ª–æ–≥–∞—Ö –ø–æ—è–≤–∏—Ç—Å—è –µ—ë chat id.")
    else:
        print(f"Watching chat ids: {sorted(TARGET_CHAT_IDS)}")
    from aiogram import executor as ex
    ex.start_polling(dp, skip_updates=True)
